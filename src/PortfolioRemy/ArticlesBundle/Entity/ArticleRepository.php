<?php

namespace PortfolioRemy\ArticlesBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends EntityRepository
{
    /**
     * récupère tous les articles trié par date décroissant
     * avec les images, catégories et tags associés
     * @return type
     */
    public function getArticles($nombreParPage, $page)
    {
        if($page < 1)
        {
            throw new \InvalidArgumentException('L\'argument $page ne peut être 
                inférieur à 1 (valeur : "'.$page.'").');
        }
        
        $query = $this->createQueryBuilder('a')
                //on joint sur l'attribut image
                ->leftJoin('a.image', 'i')
                ->addSelect('i')
                //on joint sur l'attribut catégories
                ->leftJoin('a.categories', 'c')
                ->addSelect('c')
                //on joint sur l'attribut tag
                ->leftJoin('a.tags', 't')
                ->addSelect('t')
                //on trie par date décroissant
                ->orderBy('a.date', 'DESC')
                ->getQuery();
        
        //on définit l'article à partir duquel commencer la liste
        $query->setFirstResult(($page-1)*$nombreParPage)
                //et le nombre d'articles à affiher
                ->setMaxResults($nombreParPage);
        
        return new Paginator($query);
    }
    
    /**
     * méthode pour récupérer tous les articles qui correspondent
     * à une catégorie par ordre de date
     * @param array $nom_categories
     * @return array d'Article
     */
    public function getAvecCategories(array $categories)
    {
        $qb = $this->createQueryBuilder('a');
        //jointure avec l'entité Catégorie
        $qb->join('a.categories','c')
                ->where($qb->expr()->in('c.nom', $categories))
                ->orderBy('a.date', 'DESC');
        return $qb->getQuery()->getResult();
    }
}
